import XMonad
import qualified Data.Map as M
import qualified XMonad.StackSet as W
import XMonad.Actions.Navigation2D
import XMonad.Layout.PerWorkspace
import XMonad.Layout.TwoPane
import XMonad.Layout.ComboP
import XMonad.Layout.ThreeColumns
import XMonad.Util.Run
import XMonad.Hooks.DynamicLog
import XMonad.Hooks.ManageHelpers
import XMonad.Hooks.InsertPosition
import XMonad.Hooks.ManageDocks
import System.IO
import XMonad.Layout.ResizableTile
import XMonad.Layout.SubLayouts
import XMonad.Layout.Tabbed
import XMonad.Layout.WindowNavigation
import XMonad.Layout.Simplest
import XMonad.Actions.CycleWS


main = do
  xmproc <- spawnPipe "~/.local/bin/xmobar ~/xmobar.config"
  xmonad $ withNavigation2DConfig def $ myConfig xmproc

toggleStrutsKey XConfig {XMonad.modMask = modMask} = (modMask, xK_b)

myConfig p = def
  { terminal = "terminator"
  , modMask = mod4Mask
  , keys = myKeys <+> keys def
  , layoutHook = avoidStruts $ myLayouts
  , logHook = dynamicLogWithPP $ xmobarPP { ppOutput = hPutStrLn p }
  , handleEventHook = handleEventHook def <+> docksEventHook
  , borderWidth = 4
  , focusedBorderColor = solBlue
  , manageHook = manageDocks <+> myManageHook <+> manageHook def
  }

-- layouts
-- SUBLAYOUT IS THE CAUSE OF FLOAT FOCUS LOST!!!
myLayouts = onWorkspace "2" terminalLayout
            $ onWorkspace "6" twoPaneTabbed
            $ mainLayout

mainLayout =
  windowNavigation
  $ addTabs shrinkText def
  $ subLayout [] Simplest
  $ ResizableTall 1 (3/100) (53/100) [] ||| Full

terminalLayout =
  ResizableTall 1 (3/100) (1/2) [] |||
  ThreeCol 1 (3/100) (1/2) |||
  (Mirror $ ResizableTall 1 (3/100) (1/2) [])

twoPaneTabbed =
  windowNavigation $
  combineTwoP (TwoPane 0.03 0.53) (Full) (tabbed shrinkText def) (ClassName "Firefox-esr" `Or` ClassName "qpdfview") |||
  combineTwoP (TwoPane 0.03 0.53) (Full) (Mirror $ ThreeCol 1 0.03 0.6) (ClassName "Firefox-esr" `Or` ClassName "qpdfview")

-- named colors
solBlue = "#268bd2"

--manage hooks
myManageHook = composeOne
               [ name =? "Terminator Preferences" -?> insertPosition Above Newer <+> doCenterFloat
               , isDialog -?> insertPosition Above Newer <+> doCenterFloat
               , className =? "Eog" -?> insertPosition Below Older
               , className =? "MATLAB R2017b - academic use" -?> insertPosition Below Older
               -- , className =? "Thunar" -?> doCenterFloat
               , return True -?> insertPosition Below Newer]

  where name = stringProperty "WM_NAME"

altMask = mod1Mask
myKeys conf@(XConfig {XMonad.modMask = modm}) = M.fromList
        -- basic navigation
	[ ((altMask, xK_l), windowGo R False)
 	, ((altMask, xK_j), windowGo D False)
 	, ((altMask, xK_k), windowGo U False)
 	, ((altMask, xK_h), windowGo L False)

        -- launching apps
        , ((modm, xK_e), spawn "emacsclient -c")
        , ((modm .|. altMask, xK_l), spawn "xscreensaver-command -lock")

        -- resizing tall
        , ((modm, xK_a), sendMessage MirrorShrink)
        , ((modm, xK_z), sendMessage MirrorExpand)

        -- swapping windows
        , ((modm .|. shiftMask, xK_h), windowSwap L False)
        , ((modm .|. shiftMask, xK_l), windowSwap R False)
        , ((modm .|. shiftMask, xK_k), windows W.swapUp)
        , ((modm .|. shiftMask, xK_j), windows W.swapDown)

        -- combo layout
        , ((modm .|. shiftMask, xK_Right), sendMessage $ Move R)
        , ((modm .|. shiftMask, xK_Left), sendMessage $ Move L)
        , ((modm .|. shiftMask, xK_Up), sendMessage $ Move U)
        , ((modm .|. shiftMask, xK_Down), sendMessage $ Move D)
        , ((modm .|. shiftMask, xK_s), sendMessage $ SwapWindow)

        -- pulling windows into sublayouts
        , ((modm .|. controlMask, xK_h), sendMessage $ pullGroup L)
        , ((modm .|. controlMask, xK_l), sendMessage $ pullGroup R)
        , ((modm .|. controlMask, xK_k), sendMessage $ pullGroup U)
        , ((modm .|. controlMask, xK_j), sendMessage $ pullGroup D)
        , ((modm .|. controlMask, xK_m), withFocused (sendMessage . MergeAll))
        , ((modm .|. controlMask, xK_u), withFocused (sendMessage . UnMerge))

        --easy switching of workspaces
        , ((modm, xK_Left), prevWS)
        , ((modm, xK_Right), nextWS)

        --, ((altMask, xK_Tab), cycleRecentWS [xK_Alt_L] xK_Tab xK_grave)
        , ((modm, xK_Tab), toggleWS' ["NSP"])
        ]
